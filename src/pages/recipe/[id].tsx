import Head from 'next/head'
import { collection, getDocs, query, where } from 'firebase/firestore';
import db from '../api/clientApp'
import Header from '@/components/Header';
import { Recipe } from '@/types/Recipe';
import { useContext, useEffect } from 'react';
import { AppContext } from '@/context/state';
import IngredientsInstructions from '@/components/IngredientsInstructions';
import StarRating from '@/components/StarRating';
import { getStarRating, structuredRecipeBuilder } from '@/utils/utils';
import { useGetUserId } from '@/utils/useGetUserId';
import { pushStarRating } from '@/utils/utils';

export default function RecipePage(recipe: Recipe) {
    const { name, ingredients, instructions } = recipe
    const appContext = useContext(AppContext)
    const { setRecipeName } = appContext

    useGetUserId()

    useEffect(() => {
        if (name) {
            setRecipeName(name)
            getStarRating(name).then((rating) => {
                // add rating to context here in the future
                // appContext.setStarRating(rating)
            })
        }
    }, [name, setRecipeName])

    return (
        <>
            <Head>
                <title>{`${name} | The Recipes Only`}</title>
                <meta name="description" content="Recipe generated by therecipesonly.com" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
                <script type="application/ld+json">
                    {structuredRecipeBuilder(recipe)}
                </script>
            </Head>
            <Header />
            <main className='flex flex-col p-6 min-h-screen  bg-page-bg dark:bg-gray-dark'>
                <div className='border-t border-gray-50 py-1'></div>
                <h1 className="font-serif text-3xl sm:w-3/5 w-full mx-auto pt-5 text-center">{recipe.name}</h1>
                <StarRating />
                <IngredientsInstructions ingredients={ingredients} instructions={instructions} loading={false} />
            </main>
        </>
    )
}

export async function getStaticProps(context: any) {
    try {
        // get the recipes from firebase 
        const recipesRef = collection(db, "recipes");
        const q = query(recipesRef, where("name", "==", context.params.id));
        const querySnapshot = await getDocs(q);
        const temp = querySnapshot.docs.map(doc => doc.data())
        // stringify the timestamp
        const recipe = temp.map((recipe: any) => {
            recipe.created = recipe.created ? recipe.created?.toDate().toString() : null
            // below is no longer neccessary, but does protect against datestrings formatted as D/T in recipe ratings. Not harmful to keep
            recipe.ratings = recipe.ratings ? Object.keys(recipe.ratings).map((ratingNumber: any) => {
                recipe.ratings[ratingNumber].created = recipe.ratings[ratingNumber].created ? recipe.ratings[ratingNumber].created?.toDate().toString() : null
                return recipe.ratings[ratingNumber]
            }) : null
            console.log('getStaticProps recipe', recipe)
            return recipe
        })
        return {
            props: recipe[0],
            revalidate: 10000
        }
    } catch (err) {
        console.log(err)
        return null
    }
}

export async function getStaticPaths() {
    // call the API to get all the recipes
    const recipesRef = collection(db, "recipes");
    const querySnapshot = await getDocs(recipesRef);
    const temp = querySnapshot.docs.map(doc => doc.data())

    const paths = temp.map((recipe) => ({
        params: { id: recipe.name },
    }))
    return {
        paths,
        fallback: true // false or 'blocking'
    };
}