import Head from 'next/head'
import { collection, getDocs, query, where } from 'firebase/firestore';
import db from '../api/clientApp'
import Header from '@/components/Header';
import { Recipe } from '@/types/Recipe';

export default function RecipePage({name, ingredients, instructions}: Recipe) {
    console.log(ingredients)
    return (
        <>
            <Head>
                <title>The Recipes Only</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <Header/>
            <main className='flex flex-col p-6 min-h-screen  bg-page-bg dark:bg-gray-dark'>
                <div className='border-t border-gray-50 py-1'></div>
                <div className=' sans w-2/5 mx-auto'>
                    <h1 className='text-2xl py-4'>Ingredients</h1>
                    {/* Not using a UL will hurt seo, this is MVP */}
                    <p className='pb-3'>
                        {ingredients}
                    </p>
                    <h1 className='text-2xl py-4'>Directions</h1>
                    <p>
                        {instructions}
                    </p>
                </div>
            </main>
        </>
    )
}

export async function getStaticProps(context: any) {
    try {
        const recipesRef = collection(db, "recipes");
        const q = query(recipesRef, where("name", "==", context.params.id));
        const querySnapshot = await getDocs(q);
        const temp = querySnapshot.docs.map(doc => doc.data())
        console.log(temp[0])
        return { 
            props:  temp[0],
            revalidate: 1000000
        }
    } catch (err) {
        console.log(err)
    }
}

export async function getStaticPaths() {
    return {
        paths: [
            { params: { id: "STRING", message: "HELLO!" } } // seems like I should fix this at some point
        ],
        fallback: true // false or 'blocking'
    };
}