import Header from "@/components/Header";
import Head from 'next/head'
import { Recipe } from "@/types/Recipe";
import { Suspense, useContext, useEffect, useState } from "react";
import dynamic from "next/dynamic";
import { doc, setDoc } from "firebase/firestore";
import db from "../api/clientApp";
import { capitalizeFirstLetter, recipeFormatter } from "@/utils/utils";
import { simpleRecipeApi } from "../api/getRecipe";
import { useRouter } from "next/router";
import { AppContext } from "@/context/state";
import IngredientsInstructions from "@/components/IngredientsInstructions";
import useSWR from 'swr';

const fetcher = (recipe:any) => simpleRecipeApi(recipe).then(({data}) => data);

export default function NewRecipe () {
    const [recipe, setRecipe] = useState({} as Recipe)
    const [searchTerm, setSearchTerm] = useState('')
    const router = useRouter()
    const appContext = useContext(AppContext)

    const prompt = encodeURI(`${searchTerm} recipe with ingredients and instructions only`)
    const recipeResponseObject = useSWR(prompt, fetcher, { suspense: true});

    useEffect(() => {
        const {searchTerm} = router.query
        //set the recipe name in state
        appContext.setRecipeName(searchTerm)
        setSearchTerm(searchTerm as string)
    }, [router.query, searchTerm])

    useEffect(() => {
        if(searchTerm!="" && recipeResponseObject.data?.choices[0].text){
            // console.log(recipeResponseObject)
            setRecipe(recipeFormatter(searchTerm, recipeResponseObject.data?.choices[0].text))
        }
    }, [searchTerm, recipeResponseObject.data?.choices])

    useEffect(() => {
        if(recipe.name){
            // update the state with the properly formatted recipe name
            appContext.setRecipeName(recipe.name)
            // save recipe to firestore db
            recipe.name = capitalizeFirstLetter(recipe.name)
            setDoc(doc(db, "recipes", recipe.name), recipe)
        }
    }, [recipe])

    return(
    <>
            <Head>
                <title>The Recipes Only</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
        <Header/>
        <main className='flex flex-col p-6 min-h-screen  bg-page-bg dark:bg-gray-dark'>
                <div className='border-t border-gray-50 py-1'></div>
                <IngredientsInstructions ingredients={recipe.ingredients} instructions={recipe.instructions} />
            </main>
        </>
    )
}